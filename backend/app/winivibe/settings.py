"""
Django settings for winivibe project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from os import getenv
from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = getenv(
    "API_SECRET_KEY",
    "django-insecure-i@id4wlw!)i6p+#c-t#q+ahmj66a1p&v(+waz8%7odjdiat^c!",
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = not int(getenv("PRODUCTION", "0"))

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    # django contrib apps
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # third party apps
    "rest_framework",
    "rest_framework_simplejwt",
    # personal apps
    "base_app.apps.BaseAppConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "base_app.api.auth.middleware.JWTCookieMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "winivibe.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "winivibe.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "HOST": getenv("DB_HOST", "localhost"),
        "PORT": getenv("DB_PORT", "5432"),
        "NAME": getenv("DB_NAME", "winivibe"),
        "USER": getenv("DB_USER", "postgres"),
        "PASSWORD": getenv("DB_PASS", "123"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTH_USER_MODEL = "base_app.User"


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

AWS_ACCESS_KEY_ID = getenv("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = getenv("AWS_SECRET_ACCESS_KEY")
AWS_S3_REGION_NAME = getenv("AWS_BUCKET_REGION")
AWS_S3_ENDPOINT_URL = getenv("AWS_ENDPOINT")
AWS_STORAGE_BUCKET_NAME = getenv("AWS_BUCKET_NAME")

STORAGES = {
    "default": {
        "BACKEND": "storages.backends.s3.S3Storage",
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}


STATIC_URL = "static/"
MEDIA_URL = "media/"
MEDIA_ROOT = "media/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# # # # # # # # # # # #
#  API/Server SETTINGS  #
# # # # # # # # # # # #

CSRF_COOKIE_NAME = getenv("API_CSRF_COOKIE_KEY", "csrftoken")

API_CSRF_HEADER_NAME = (
    f"HTTP_{getenv('API_CSRF_COOKIE_KEY', 'X-CSRFTOKEN').upper().replace('-', '_')}"
)

# Rest Framework Settings
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.SessionAuthentication",
        "base_app.api.auth.JWTCookieAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticatedOrReadOnly",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 25,
}


DJANGO_API_URN = getenv("DJANGO_API_URN")

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": False,
    # "BLACKLIST_AFTER_ROTATION": False,
    "ALGORITHM": "HS256",
    "ISSUER": DJANGO_API_URN,
    "AUDIENCE": [DJANGO_API_URN, getenv("MEDIA_API_URN")],
    "LEEWAY": 0,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    # ########################### #
    # Token cookie configurations #
    # ########################### #
    "AUTH_COOKIE_ACCESS_KEY": getenv("API_JWT_COOKIE_KEY"),
    "AUTH_COOKIE_REFRESH_KEY": "api_refresh_token",
    "AUTH_COOKIE_DOMAIN": None,
    "AUTH_COOKIE_SECURE": False,
    "AUTH_COOKIE_HTTP_ONLY": True,
    "AUTH_COOKIE_PATH": "/",
    "AUTH_COOKIE_SAMESITE": "Lax",
}


# # # # # # # # # # # # #
#  Celery configuration   #
# # # # # # # # # # # # #

BROKER_REDIS_HOST = getenv("REDIS_HOST", "localhost")
BROKER_REDIS_PORT = getenv("REDIS_PORT", 6379)
CELERY_BROKER_URL = f"redis://{BROKER_REDIS_HOST}:{BROKER_REDIS_PORT}/0"
# CELERY_RESULT_BACKEND = CELERY_BROKER_URL

CELERY_TASK_IGNORE_RESULT = True
CELERY_TASK_ACKS_LATE = True

CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_TASK_DEFAULT_QUEUE: str = "base-api-queue"
CELERY_TASK_DEFAULT_ROUTING_KEY: str = "base-api-route"
# CELERY_RESULT_BACKEND = 'db+sqlite:///results.sqlite'

if DEBUG:
    INSTALLED_APPS.append("debug_toolbar")
    MIDDLEWARE.insert(1, "debug_toolbar.middleware.DebugToolbarMiddleware")
    INTERNAL_IPS = ["127.0.0.1"]
    DEBUG_TOOLBAR_CONFIG = {
        "RENDER_PANELS": False,
    }
else:
    from django.core.management.utils import get_random_secret_key

    SECRET_KEY = getenv("API_SECRET_KEY", get_random_secret_key())
