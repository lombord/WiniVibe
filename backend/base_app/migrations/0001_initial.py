# Generated by Django 4.2.11 on 2024-04-12 14:20

import base_app.models.abstract
import base_app.models.fields
import base_app.models.utils
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('status', models.PositiveSmallIntegerField(blank=True, default=0, verbose_name='user status')),
            ],
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Playlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Playlist title')),
                ('description', models.TextField(max_length=500, verbose_name='Playlist description')),
                ('is_public', models.BooleanField(default=False, verbose_name='Is public playlist?')),
            ],
        ),
        migrations.CreateModel(
            name='PlaylistTrack',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True, verbose_name='Added date')),
                ('playlist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tracks', to='base_app.playlist')),
            ],
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Room name')),
                ('is_public', models.BooleanField(default=False, verbose_name='Is public room')),
                ('can_chat', models.BooleanField(default=True, verbose_name='Can chat')),
                ('description', models.TextField(max_length=500, verbose_name='Room description')),
                ('host', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_rooms', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Tag Name')),
                ('slug', models.SlugField(blank=True, max_length=255, unique=True, verbose_name='Tag Slug')),
                ('tag_type', models.CharField(blank=True, default='tag', max_length=50, verbose_name='Tag Type')),
            ],
        ),
        migrations.CreateModel(
            name='Track',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('title', models.CharField(max_length=100, verbose_name='Track title')),
                ('slug', models.CharField(blank=True, max_length=255, verbose_name='Track slug')),
                ('description', models.TextField(blank=True, max_length=1000.0, null=True, verbose_name='Track description')),
                ('is_public', models.BooleanField(blank=True, default=True, verbose_name='Is public track')),
                ('track', models.FileField(max_length=255, upload_to=base_app.models.utils.DynamicPath('users/{track.uploaded_by_id}/tracks/{track.uuid}', ext='.opus', name='track', pass_as='track'), validators=[base_app.models.utils.FileValidator(content_types={'audio/wav', 'audio/mpeg', 'audio/x-m4a', 'audio/flac', 'audio/ogg', 'audio/x-aiff'}, max_size=1073741824), django.core.validators.FileExtensionValidator({'aiff', 'wav', 'flac', 'mp3', 'mp2', 'ogg', 'opus', 'alac'}, 'Invalid audio format valid formats are: aiff, wav, flac, mp3, mp2, ogg, opus, alac')], verbose_name='Track file')),
                ('metadata', models.JSONField(blank=True, default=dict, verbose_name='Track metadata')),
            ],
        ),
        migrations.CreateModel(
            name='TrackComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='Comment content')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created date')),
                ('edited', models.DateTimeField(auto_now=True, verbose_name='Created date')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TrackCommentReply',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='Comment content')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created date')),
                ('edited', models.DateTimeField(auto_now=True, verbose_name='Created date')),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='base_app.trackcomment')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city', models.CharField(blank=True, max_length=100, null=True, verbose_name='City')),
                ('country', models.CharField(blank=True, max_length=100, null=True, verbose_name='Country')),
                ('bio', models.TextField(blank=True, max_length=600, null=True, verbose_name='BIO')),
                ('user', base_app.models.fields.AutoOneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserTrackQueue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('track', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base_app.track')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserSocialLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, default='social', max_length=50, verbose_name='short title')),
                ('link', models.URLField(verbose_name='social link')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='social_links', to='base_app.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfilePhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('small', models.ImageField(blank=True, max_length=255, null=True, upload_to=base_app.models.abstract.CompImagePath(size='small'), verbose_name='Small Image')),
                ('medium', models.ImageField(blank=True, max_length=255, null=True, upload_to=base_app.models.abstract.CompImagePath(size='medium'), verbose_name='Medium Image')),
                ('large', models.ImageField(blank=True, max_length=255, null=True, upload_to=base_app.models.abstract.CompImagePath(size='large'), verbose_name='Large Image')),
                ('referring', base_app.models.fields.ImageOneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='photo', to='base_app.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfileHeaderImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('small', models.ImageField(blank=True, max_length=255, null=True, upload_to=base_app.models.abstract.CompImagePath(size='small'), verbose_name='Small Image')),
                ('medium', models.ImageField(blank=True, max_length=255, null=True, upload_to=base_app.models.abstract.CompImagePath(size='medium'), verbose_name='Medium Image')),
                ('large', models.ImageField(blank=True, max_length=255, null=True, upload_to=base_app.models.abstract.CompImagePath(size='large'), verbose_name='Large Image')),
                ('referring', base_app.models.fields.ImageOneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='header_image', to='base_app.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='UserFollow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('followed_date', models.DateTimeField(auto_now_add=True, verbose_name='Followed date')),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Follower')),
                ('following', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Following for')),
            ],
        ),
        migrations.CreateModel(
            name='TrackStream',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('play_count', models.IntegerField(blank=True, default=1, verbose_name='Play count')),
                ('timestamp', models.DateTimeField(auto_now=True)),
                ('track', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='streams', to='base_app.track')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='streams', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TrackReplyLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='base_app.trackcommentreply')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TrackLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('track', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='base_app.track')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TrackCoverImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('small', models.ImageField(blank=True, max_length=255, null=True, upload_to=base_app.models.abstract.CompImagePath(size='small'), verbose_name='Small Image')),
                ('medium', models.ImageField(blank=True, max_length=255, null=True, upload_to=base_app.models.abstract.CompImagePath(size='medium'), verbose_name='Medium Image')),
                ('large', models.ImageField(blank=True, max_length=255, null=True, upload_to=base_app.models.abstract.CompImagePath(size='large'), verbose_name='Large Image')),
                ('referring', base_app.models.fields.ImageOneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='cover_image', to='base_app.track')),
            ],
        ),
        migrations.AddField(
            model_name='trackcommentreply',
            name='liked_people',
            field=models.ManyToManyField(related_name='liked_replies', through='base_app.TrackReplyLike', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='trackcommentreply',
            name='replied_to',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='received_replies', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='TrackCommentLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='base_app.trackcomment')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='trackcomment',
            name='liked_people',
            field=models.ManyToManyField(related_name='liked_comments', through='base_app.TrackCommentLike', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='trackcomment',
            name='owner',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='track_comments', to=settings.AUTH_USER_MODEL, verbose_name='Comment owner'),
        ),
        migrations.AddField(
            model_name='trackcomment',
            name='track',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='base_app.track'),
        ),
        migrations.AddField(
            model_name='track',
            name='liked_people',
            field=models.ManyToManyField(related_name='liked_tracks', through='base_app.TrackLike', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='track',
            name='playlists',
            field=models.ManyToManyField(related_name='+', through='base_app.PlaylistTrack', to='base_app.playlist'),
        ),
        migrations.AddField(
            model_name='track',
            name='streamed_people',
            field=models.ManyToManyField(related_name='streamed_tracks', through='base_app.TrackStream', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='track',
            name='tags',
            field=models.ManyToManyField(related_name='tracks', to='base_app.tag'),
        ),
        migrations.AddField(
            model_name='track',
            name='uploaded_by',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tracks', to=settings.AUTH_USER_MODEL, verbose_name='Uploaded user'),
        ),
        migrations.CreateModel(
            name='RoomMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField(verbose_name='Message')),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('replied_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='replies', to='base_app.roommessage', verbose_name='Replied message')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='base_app.room')),
            ],
        ),
        migrations.CreateModel(
            name='RoomMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_muted', models.BooleanField(default=False, verbose_name='Is muted member')),
                ('can_add_song', models.BooleanField(default=False, verbose_name='Can add song')),
                ('joint_date', models.DateTimeField(auto_now_add=True)),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to='base_app.room')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RoomCoverImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('small', models.ImageField(blank=True, max_length=255, null=True, upload_to=base_app.models.abstract.CompImagePath(size='small'), verbose_name='Small Image')),
                ('medium', models.ImageField(blank=True, max_length=255, null=True, upload_to=base_app.models.abstract.CompImagePath(size='medium'), verbose_name='Medium Image')),
                ('large', models.ImageField(blank=True, max_length=255, null=True, upload_to=base_app.models.abstract.CompImagePath(size='large'), verbose_name='Large Image')),
                ('referring', base_app.models.fields.ImageOneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='cover_image', to='base_app.room')),
            ],
        ),
        migrations.AddField(
            model_name='room',
            name='people',
            field=models.ManyToManyField(related_name='joint_rooms', through='base_app.RoomMember', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='room',
            name='queue_tracks',
            field=models.ManyToManyField(related_name='rooms', to='base_app.track'),
        ),
        migrations.AddField(
            model_name='room',
            name='tags',
            field=models.ManyToManyField(related_name='rooms', to='base_app.tag'),
        ),
        migrations.AddField(
            model_name='playlisttrack',
            name='track',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='base_app.track'),
        ),
        migrations.CreateModel(
            name='PlaylistLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('playlist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='base_app.playlist')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PlaylistCoverImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('small', models.ImageField(blank=True, max_length=255, null=True, upload_to=base_app.models.abstract.CompImagePath(size='small'), verbose_name='Small Image')),
                ('medium', models.ImageField(blank=True, max_length=255, null=True, upload_to=base_app.models.abstract.CompImagePath(size='medium'), verbose_name='Medium Image')),
                ('large', models.ImageField(blank=True, max_length=255, null=True, upload_to=base_app.models.abstract.CompImagePath(size='large'), verbose_name='Large Image')),
                ('referring', base_app.models.fields.ImageOneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='cover_image', to='base_app.playlist')),
            ],
        ),
        migrations.AddField(
            model_name='playlist',
            name='liked_people',
            field=models.ManyToManyField(related_name='liked_playlists', through='base_app.PlaylistLike', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='playlist',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Playlist owner'),
        ),
        migrations.AddField(
            model_name='playlist',
            name='tags',
            field=models.ManyToManyField(related_name='playlists', to='base_app.tag'),
        ),
        migrations.CreateModel(
            name='JoinRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.SmallIntegerField(choices=[(0, 'Pending'), (1, 'Accepted'), (2, 'Declined')], default=0, verbose_name='Request status')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requests', to='base_app.room')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='my_requests', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='followers',
            field=models.ManyToManyField(related_name='following', through='base_app.UserFollow', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='queue_tracks',
            field=models.ManyToManyField(related_name='+', through='base_app.UserTrackQueue', to='base_app.track', verbose_name="User's tracks queue"),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AddConstraint(
            model_name='userfollow',
            constraint=models.UniqueConstraint(fields=('following', 'follower'), name='follow_once', violation_error_message='You are already following this user'),
        ),
        migrations.AddConstraint(
            model_name='userfollow',
            constraint=models.CheckConstraint(check=models.Q(('follower', models.F('following')), _negated=True), name='dont_follow_yourself', violation_error_message="You can't follow yourself!"),
        ),
        migrations.AddConstraint(
            model_name='trackstream',
            constraint=models.UniqueConstraint(fields=('track', 'user'), name='unique_track_stream', violation_error_message='Track stream relation must be unique'),
        ),
        migrations.AddConstraint(
            model_name='trackreplylike',
            constraint=models.UniqueConstraint(fields=('user', 'comment'), name='unique_comment_reply_like', violation_error_message='You have already liked this comment'),
        ),
        migrations.AddConstraint(
            model_name='tracklike',
            constraint=models.UniqueConstraint(fields=('track', 'user'), name='unique_track_like', violation_error_message='You have already liked this track!'),
        ),
        migrations.AddConstraint(
            model_name='trackcommentlike',
            constraint=models.UniqueConstraint(fields=('user', 'comment'), name='unique_track_comment_like', violation_error_message='You have already liked this comment'),
        ),
        migrations.AddConstraint(
            model_name='track',
            constraint=models.UniqueConstraint(fields=('uploaded_by', 'slug'), name='unique_track_slug_for_user', violation_error_message='You already have a track with this url'),
        ),
        migrations.AddConstraint(
            model_name='roommember',
            constraint=models.UniqueConstraint(fields=('room', 'user'), name='join_room_once', violation_error_message='You are already a member of this room'),
        ),
        migrations.AddConstraint(
            model_name='playlisttrack',
            constraint=models.UniqueConstraint(fields=('playlist', 'track'), name='unique_playlist_track', violation_error_message='This track has already been added to the playlist'),
        ),
        migrations.AddConstraint(
            model_name='playlistlike',
            constraint=models.UniqueConstraint(fields=('user', 'playlist'), name='unique_playlist_like', violation_error_message='You have already liked this playlist'),
        ),
        migrations.AddConstraint(
            model_name='joinrequest',
            constraint=models.UniqueConstraint(fields=('user', 'room'), name='unique_join_request', violation_error_message='You have already requested'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(models.OrderBy(models.F('status'), descending=True), name='user_status_idx'),
        ),
    ]
